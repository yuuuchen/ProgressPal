# -*- coding: utf-8 -*-
"""0815_主程式_版本一.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1utsOhc6Rweb0TBKWDRmoM0jeyqp2qNT5
"""

!pip install -U google-genai

from google import genai
from google.genai import types
from google.colab import userdata
from IPython.display import Markdown
import textwrap, os, json, re

def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def extract_json(text: str):
    """容錯：去掉 ``` 與多餘文字，抓出最外層 JSON 陣列"""
    if not text:
        raise ValueError("模型回傳是空字串")
    t = text.strip()
    if t.startswith("```"):
        t = re.sub(r"^```(?:json)?\s*|\s*```$", "", t, flags=re.DOTALL)
    try:
        return json.loads(t)
    except json.JSONDecodeError:
        m = re.search(r"\[.*\]", t, flags=re.DOTALL)
        if m:
            return json.loads(m.group(0))
        raise

# 設定 API 金鑰
API_KEY = userdata.get('GOOGLE_API_KEY')
client = genai.Client(api_key=API_KEY)

"""教材切分


"""

# 上傳 PDF
pdf_path = "串列.pdf"
assert os.path.exists(pdf_path), f"找不到檔案: {pdf_path}"

myfile = client.files.upload(file=pdf_path)
print("已上傳:", myfile.uri)

# Gemini 分段
split_prompt = """
你是一位資料結構課程的助教。請將這份 PDF（視為同一章節）劃分為若干「單元」。
規則：
- 依教材自然結構切分，每單元內容與名稱皆不重疊。
- 每個單元用 1 行「unit_title」命名（不超過 16 個字，務必有語意）。
- 「content」為該單元需教授的重點摘要（包含定義/重點清單/舉例），長度建議 300~500 字。
- 僅輸出 JSON，勿加任何說明或標註。
"""

gen_config = types.GenerateContentConfig(
    response_mime_type="application/json",
    response_schema=types.Schema(
        type=types.Type.ARRAY,
        items=types.Schema(
            type=types.Type.OBJECT,
            properties={
                "unit_title": types.Schema(type=types.Type.STRING),
                "content": types.Schema(type=types.Type.STRING),
            },
            required=["unit_title", "content"],
        ),
    ),
)

split_response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[types.Content(role="user", parts=[
        types.Part(file_data=types.FileData(
            file_uri=myfile.uri,
            mime_type="application/pdf"
        )),
        types.Part(text=split_prompt)
    ])],
    config=gen_config
)

raw_text = split_response.text

try:
    units = json.loads(raw_text)
except json.JSONDecodeError:
    units = extract_json(raw_text)

assert isinstance(units, list) and len(units) > 0, "分段結果為空"
for i, u in enumerate(units, 1):
    print(f"{i:02d}. {u['unit_title']}  (約 {len(u['content'])} 字)")

"""**單元教學**

無特定說明教材呈現方式與學生程度(初學/複習)
"""

# 固定教學指令
system_instruction = "你是一位資料結構課程的家教，請用繁體中文仔細地講解以下單元內容，並適度舉例(需提供解答)。"

# 教學情緒對應表（回傳 tone 和 style）
def emotion_instruction_map(emotion):
    mapping = {
        "frustrated": {"tone": "溫暖且安撫", "style": "循序漸進、拆解問題"},
        "confused": {"tone": "溫和且耐心", "style": "舉例對照、比喻解釋"},
        "bored": {"tone": "活潑且有趣", "style": "加入情境化案例、互動提問"},
        "engaged": {"tone": "積極且肯定", "style": "深入探討、引導延伸思考"},
        "surprised": {"tone": "熱情且鼓勵", "style": "延伸趣味點、引入新視角"},
        "joyful": {"tone": "輕鬆且正向", "style": "融入挑戰題、鼓勵自我探索"},
    }
    return mapping.get(emotion, {"tone": "中性", "style": "一般解釋"})

conversation_history = ""
last_emotion_profile = {"tone": "中性", "style": "一般解釋"}  # 第一單元預設中性
last_emotion = "中性"

for idx, unit in enumerate(units, start=1):
    print(f"\n=== 單元 {idx}：{unit['unit_title']} ===\n")

    # 教學
    lecture_prompt = (
        system_instruction
        + f"\n你是一位{last_emotion_profile['tone']}的資料結構助教，現在面對一位感到{last_emotion}的學生"
          f"請用{last_emotion_profile['style']}方式講解(。\n"
        + unit["content"]
    )
    print("🔹 正在生成教學內容...")
    lecture_resp = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[types.Content(role="user", parts=[
            types.Part(text=lecture_prompt)
        ])]
    )
    lecture_text = lecture_resp.text
    display(to_markdown(lecture_text))

    print("🔹 進入問答階段")
    # 問答階段
    while True:
        q = input("學生提問或輸入 next 進入下一單元：")
        if q.strip().lower() == "next":
            break

        tone = last_emotion_profile.get("tone", "中性")
        style = last_emotion_profile.get("style", "一般解釋")

        answer_prompt = f"""你是一位{tone}的資料結構助教。
        請用{style}方式，面對一位感到{last_emotion}的學生，
        回答以下問題：{q}
        請根據以下教材回答，避免超出範圍：
        {unit['content']}
        若問題與教材無關，請回覆「這個問題與本單元教材無關」。
        """
        print("🔹 正在生成答覆...")
        ans_resp = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=[types.Content(role="user", parts=[
                types.Part(text=answer_prompt)
            ])]
        )
        ans_text = ans_resp.text
        display(to_markdown(ans_text))
        conversation_history += f"\n[單元{idx}] 問：{q}\n答：{ans_text}"

    # 問答結束後，輸入新的情緒（第二單元開始才更新）
    detected_emotion = input("請輸入偵測到的學生情緒：")
    last_emotion_profile = emotion_instruction_map(detected_emotion)
    last_emotion = detected_emotion

"""有指令-初學"""

# 固定教學指令：由函式動態產生（帶入學習階段與模式）
def learning_mode(stage):
    mapping = {
        "初學": "簡單且仔細、步驟拆解、使用生活化比喻與小練習",
        "複習": "深入且精煉、強調重點、分析時間與空間複雜度、列出常見陷阱與邊界條件"
    }
    return mapping.get(stage, "一般解說")

def build_system_instruction(stage, mode=None):
    mode_text = mode or learning_mode(stage)
    return (
        f"你是一位資料結構課程的家教，現在面對一位{stage}資料結構的學生，"
        f"請用繁體中文、採用{mode_text}講解以下單元內容，並適度舉例（需提供解答）。\n"
        "回應結構：\n"
        "1) 核心觀念（3–5點）\n"
        "2) 迷思澄清（2點）\n"
        "3) 例題與詳細解答（至少1題）\n"
        "4) 小測驗（2題，附答案）"
    )

# 教學情緒對應表（回傳 tone 和 style）
def emotion_instruction_map(emotion):
    mapping = {
        "frustrated": {"tone": "溫暖且安撫", "style": "循序漸進、拆解問題"},
        "confused":   {"tone": "溫和且耐心", "style": "舉例對照、比喻解釋"},
        "bored":      {"tone": "活潑且有趣", "style": "加入情境化案例、互動提問"},
        "engaged":    {"tone": "積極且肯定", "style": "深入探討、引導延伸思考"},
        "surprised":  {"tone": "熱情且鼓勵", "style": "延伸趣味點、引入新視角"},
        "joyful":     {"tone": "輕鬆且正向", "style": "融入挑戰題、鼓勵自我探索"},
    }
    return mapping.get(emotion, {"tone": "中性", "style": "一般解釋"})

# ===== 主流程 =====
conversation_history = ""
last_emotion_profile = {"tone": "中性", "style": "一般解釋"}  # 第一單元固定中性
last_emotion = "中性"

learning_stage = "初學"   # 或 "複習"

base_system_instruction = build_system_instruction(learning_stage)

for idx, unit in enumerate(units, start=1):
    print(f"\n=== 單元 {idx}：{unit['unit_title']} ===\n")

    # 第一單元：中性語氣；第二單元起加入情緒的口吻/風格
    emotion_line = "" if idx == 1 else (
        f"你現在應以{last_emotion_profile['tone']}的語氣，並採用{last_emotion_profile['style']}呈現。"
    )

    # === 單元講解 Prompt ===
    lecture_prompt = (
        base_system_instruction + "\n" +
        emotion_line + "\n" +
        "以下是本單元教材，請根據教材進行講解，不要回答其他問題：\n" +
        unit["content"]
    )

    print("🔹 正在生成教學內容...")
    lecture_resp = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[types.Content(role="user", parts=[types.Part(text=lecture_prompt)])]
    )
    lecture_text = lecture_resp.text
    display(to_markdown(lecture_text))

    # === 問答階段 ===
    print("🔹 進入問答階段")
    while True:
        q = input("學生提問或輸入 next 進入下一單元：")
        if q.strip().lower() == "next":
            break

        tone = last_emotion_profile.get("tone", "中性")
        style = last_emotion_profile.get("style", "一般解釋")

        # === 問題回答 Prompt（與單元講解分開） ===
        qa_prompt = (
            f"你是一位{tone}的資料結構助教，請用{style}的方式回答學生問題。\n"
            "回答時僅能依據以下教材內容作答；如果問題與教材無關，請回答「這個問題與本單元教材無關」。\n"
            f"教材：\n{unit['content']}\n"
            f"學生問題：{q}"
        )

        print("🔹 正在生成答覆...")
        ans_resp = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=[types.Content(role="user", parts=[types.Part(text=qa_prompt)])]
        )
        ans_text = ans_resp.text
        display(to_markdown(ans_text))
        conversation_history += f"\n[單元{idx}] 問：{q}\n答：{ans_text}"

    # 問答結束後輸入新的情緒
    detected_emotion = input("請輸入偵測到的學生情緒：")
    last_emotion_profile = emotion_instruction_map(detected_emotion)
    last_emotion = detected_emotion

"""有指令-複習"""

# 固定教學指令：由函式動態產生（帶入學習階段與模式）
def learning_mode(stage):
    mapping = {
        "初學": "簡單且仔細、步驟拆解、使用生活化比喻與小練習",
        "複習": "深入且精煉、強調重點、分析時間與空間複雜度、列出常見陷阱與邊界條件"
    }
    return mapping.get(stage, "一般解說")

def build_system_instruction(stage, mode=None):
    mode_text = mode or learning_mode(stage)
    return (
        f"你是一位資料結構課程的家教，現在面對一位{stage}資料結構的學生，"
        f"請用繁體中文、採用{mode_text}講解以下單元內容，並適度舉例（需提供解答）。\n"
        "回應結構：\n"
        "1) 核心觀念（3–5點）\n"
        "2) 迷思澄清（2點）\n"
        "3) 例題與詳細解答（至少1題）\n"
        "4) 小測驗（2題，附答案）"
    )

# 教學情緒對應表（回傳 tone 和 style）
def emotion_instruction_map(emotion):
    mapping = {
        "frustrated": {"tone": "溫暖且安撫", "style": "循序漸進、拆解問題"},
        "confused":   {"tone": "溫和且耐心", "style": "舉例對照、比喻解釋"},
        "bored":      {"tone": "活潑且有趣", "style": "加入情境化案例、互動提問"},
        "engaged":    {"tone": "積極且肯定", "style": "深入探討、引導延伸思考"},
        "surprised":  {"tone": "熱情且鼓勵", "style": "延伸趣味點、引入新視角"},
        "joyful":     {"tone": "輕鬆且正向", "style": "融入挑戰題、鼓勵自我探索"},
    }
    return mapping.get(emotion, {"tone": "中性", "style": "一般解釋"})

# ===== 主流程 =====
conversation_history = ""
last_emotion_profile = {"tone": "中性", "style": "一般解釋"}  # 第一單元固定中性
last_emotion = "中性"

learning_stage = "複習"   # 或 "初學"

base_system_instruction = build_system_instruction(learning_stage)

for idx, unit in enumerate(units, start=1):
    print(f"\n=== 單元 {idx}：{unit['unit_title']} ===\n")

    # 第一單元：中性語氣；第二單元起加入情緒的口吻/風格
    emotion_line = "" if idx == 1 else (
        f"你現在應以{last_emotion_profile['tone']}的語氣，並採用{last_emotion_profile['style']}呈現。"
    )

    # === 單元講解 Prompt ===
    lecture_prompt = (
        base_system_instruction + "\n" +
        emotion_line + "\n" +
        "以下是本單元教材，請根據教材進行講解，不要回答其他問題：\n" +
        unit["content"]
    )

    print("🔹 正在生成教學內容...")
    lecture_resp = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[types.Content(role="user", parts=[types.Part(text=lecture_prompt)])]
    )
    lecture_text = lecture_resp.text
    display(to_markdown(lecture_text))

    # === 問答階段 ===
    print("🔹 進入問答階段")
    while True:
        q = input("學生提問或輸入 next 進入下一單元：")
        if q.strip().lower() == "next":
            break

        tone = last_emotion_profile.get("tone", "中性")
        style = last_emotion_profile.get("style", "一般解釋")

        # === 問題回答 Prompt（與單元講解分開） ===
        qa_prompt = (
            f"你是一位{tone}的資料結構助教，請用{style}的方式回答學生問題。\n"
            "回答時僅能依據以下教材內容作答；如果問題與教材無關，請回答「這個問題與本單元教材無關」。\n"
            f"教材：\n{unit['content']}\n"
            f"學生問題：{q}"
        )

        print("🔹 正在生成答覆...")
        ans_resp = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=[types.Content(role="user", parts=[types.Part(text=qa_prompt)])]
        )
        ans_text = ans_resp.text
        display(to_markdown(ans_text))
        conversation_history += f"\n[單元{idx}] 問：{q}\n答：{ans_text}"

    # 問答結束後輸入新的情緒
    detected_emotion = input("請輸入偵測到的學生情緒：")
    last_emotion_profile = emotion_instruction_map(detected_emotion)
    last_emotion = detected_emotion