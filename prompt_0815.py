# -*- coding: utf-8 -*-
"""prompt_0815.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WZxOXf_k4WJRDoBJji2S9D58hEVl2v19

Prompt 模板庫（Template Library）
"""

# 全域模板庫
'''
設定動態指令
'''

PROMPT_TEMPLATES = {
    # 行為 1：問答（簡短自然語言）
    "qa": """
任務：QA
- 回答字數總計不得超過 200 字
- 根據學生參與度調整語氣與解釋深度
回應風格:{style}
學生的參與度：{engagement}
學習階段：{stage}
問題：{question}
教材：{materials}
""",

    # 行為 2：教學（教材結構化）
    "tutoring": """
任務：教學
輸出需依照以下結構：
  - 「### 教學重點」：解釋核心概念，理性陳述單元內容與重點。
  - 「### 範例」：提供簡單範例或python程式碼示例，並使用指定教學策略。
  - 「### 總結」：總結重點回顧，簡潔明瞭。
回應風格:{style}
學生的參與度：{engagement}
學習階段：{stage}
教材：{materials}
"""
}

### 系統指令 System Prompt

SYSTEM_PROMPT = """
你是一位智慧助教，專精於資料結構教學。
你需要根據學生的「學習參與度」調整語氣、解釋深度與互動方式。

### 規則
1. 使用自然語言分段回答，可使用 Markdown 或表格。
2. 語氣需「溫暖、易於理解」。
3. 直接回應問題，不要打招呼。
4. 全文需使用繁體中文。
5. 請依照教材內容進行回應
6. 範例使用語言標籤 (例如 ```python)
"""

'''
# 映射方法：情緒 → 語氣 + 教學策略
def map_emotion_to_profile(emotion):
  mapping = {
      "挫折": {"tone": "溫暖且安撫", "style": "循序漸進、拆解問題"},
      "困惑": {"tone": "溫和且耐心", "style": "舉例對照、比喻解釋"},
      "無聊": {"tone": "活潑且有趣", "style": "加入情境化案例、互動提問"},
      "投入": {"tone": "積極且肯定", "style": "深入探討、引導延伸思考"},
      "驚訝": {"tone": "熱情且鼓勵", "style": "延伸趣味點、引入新視角"},
      "喜悅": {"tone": "輕鬆且正向", "style": "融入挑戰題、鼓勵自我探索"},
  }
  return mapping.get(emotion, {"tone": "中性", "style": "一般解釋"})

# 映射方法：參與度 → 語氣 + 教學策略
'''
def map_engagement_to_profile(engagement):
  mapping = {
    "high": '''- 語氣：積極且肯定
    - 教學風格：引導延伸思考，促使挑戰性學習
    - 回覆時：提供更深入的概念解釋，並在結尾附帶延伸思考問題，鼓勵學生反思，例如「你覺得在什麼場景下使用 Linked List 的插入刪除優勢最明顯？」'''
    ,
    "low": '''- 語氣：溫和且耐心
    - 教學風格：降低學習困難度，舉例對照、比喻解釋
    - 回覆時：用簡單清楚的方式解釋概念，加入生活化例子，結尾加入正向鼓勵，例如「你已經掌握基礎概念了，下一步可以試著操作一下程式碼，看看效果如何。」
    - **禁止在結尾使用任何提問或挑戰性問題**'''
  }
  return mapping.get(engagement, '提供直接的解釋，避免額外挑戰或比喻')


# 主方法：回答學生提問。使用學習參與度
def generate_prompt(engagement, question, materials, stage='初學'):
  materials_text = "\n".join(f"{i+1}. {m}" for i, m in enumerate(materials))
  template = PROMPT_TEMPLATES["qa"]
  prompt_text = template.format(
      style=map_engagement_to_profile(engagement),
      engagement=engagement,
      question=question,
      stage=stage,
      materials=materials_text
  )
  return prompt_text


# 根據教材進行教學
def generate_materials(engagement ,materials ,stage="初學"):
  materials_text = "\n".join(f"{i+1}. {m}" for i, m in enumerate(materials))
  template = PROMPT_TEMPLATES["tutoring"]
  prompt_text = template.format(
      style=map_engagement_to_profile(engagement),
      engagement=engagement,
      materials=materials_text,
      stage=stage
  )
  return prompt_text

"""格式整理工具"""

import re

def clean_text(raw_text: str) -> dict:
    """
    將 Markdown 格式 (含 ### 教學重點、範例、總結) 轉成 dict
    """
    sections = {"teaching": "", "example": "", "summary": ""}

    # 確保最後有換行，避免最後一段抓不到
    raw_text = raw_text.strip() + "\n"

    # 改良正則，多行匹配
    pattern = r"###\s*(教學重點|範例|總結)\s*([\s\S]*?)(?=\n###|\Z)"
    matches = re.findall(pattern, raw_text)

    for title, content in matches:
        content = content.strip()
        if title == "教學重點":
            sections["teaching"] = content
        elif title == "範例":
            sections["example"] = content
        elif title == "總結":
            sections["summary"] = content

    if not sections["summary"]:
      sections["summary"] = "（模型未輸出）"


    return sections

"""測資："""

test_high = {
  "參與度": "high",
  "提問": "我大概懂 linked list 是什麼，但不知道它比 array 的優勢在哪裡？",
  "教材": [
    "Array 是連續的記憶體空間，存取速度快，但插入與刪除元素需要搬移其他元素。",
    "Linked List 使用節點（Node）來串接，每個節點包含資料與指向下一個節點的指標，適合頻繁插入與刪除的情境。",
    "Linked List 的缺點是存取速度較慢，因為必須從頭逐一走訪節點。"
  ],
}

test_low = {
  "參與度": "low",
  "提問": "我看不懂 linked list 到底是什麼？",
  "教材": [
    "Linked List 是一種資料結構，由一系列的節點組成。",
    "每個節點包含資料與一個指向下一個節點的參考。",
    "與 Array 不同，Linked List 的元素並非連續存放在記憶體中。"
  ]
}
